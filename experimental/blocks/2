Notice the data in the folder open_positions. This time I have used an entirely different approach to compute the proof of trade.

I wrote the trades in a csv file and ran these commands on my Macbook M2:

sha512 more_trades.csv > more_trades.csv.sha512
tail -c 9 more_trades.csv.sha512 > more_trades.csv.sha512.compressed

But this again generated only an 8-hex digit trade ID, regardless of the size of the original file!

Remember of when you do a banking transaction in India: when you enter your credit card PIN, doesn't the bank send you a simple 6-base10-digit OTP? This is the equivalent of that. I intend to optimistically write the OTP of the trade on the FairyTaleDB blockchain, and it becomes a wallet holder's responsibility to "claim" it as a trade made by them; otherwise we just cancel the trade in a further block.

Now imagine this: you walk into a restaurant, you order food, you tap your card. The restaurant doesn't always debit your account immediately, right? You can have the food and then pay. What if some day you have food and you forget your wallet AND phone? You will have to find a way to induce "trust" that you will pay them back, isn't it?

That's where we come in: you create an algorithm saying "I promise that I will pay Rasodu 250 INR tomorrow, and as a proof of this, I will send a mutually agreed 8-hex-digit number to Rasodu's Whatsapp number as soon as I reach home."

You reach home, you write the "more_trades.csv" file, you run the commands as above, and you send the contents of more_trades.csv.sha512.compressed to Rasodu. That's it!

When the chain has reached a few blocks later, Jay (Rasodu's owner) can himself claim that the INR amount issued by you using the proof of you saying the above agreement of algorithm happened, as well as the 8-digit ID.

b7af6e99edf556a367295322ebc1866cf9dd76d3f5319711cb0e2e09959f77e303e72728fd8adb12dc759cf5866206675936789143fbdb7a4074ec34ed8a2296
